<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>韶合</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-23T09:24:04.882Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>C-in</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/23/hello-world/"/>
    <id>http://yoursite.com/2017/07/23/hello-world/</id>
    <published>2017-07-23T09:24:04.882Z</published>
    <updated>2017-07-23T09:24:04.882Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型的一些整理</title>
    <link href="http://yoursite.com/2016/08/12/prototype/"/>
    <id>http://yoursite.com/2016/08/12/prototype/</id>
    <published>2016-08-12T12:16:52.000Z</published>
    <updated>2018-01-23T14:04:23.010Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">以前一直对原型(prototype)，原型链，__ proto __ ，以及prototype和 __ proto __之间的关系感到凌乱，</div><div class="line">所以最近花了点时间整理一下。如果哪里写的有问题，欢迎大神斧正。</div></pre></td></tr></table></figure>
<blockquote>
<pre><code>首先要明确：
</code></pre></blockquote>
<pre><code>在js中，函数是一等公民，函数有很多特性，函数是对象。在js中，是普通的引用类型，函数的特点是一个代码执行的模板。在进行深拷贝的时候，不需要考虑函数，因为函数只是一个模板，无论拷贝多少份和获得引用，得到的效果是一样的。
Js是解释执行的语言，其特点：只要代码执行了，就会进行解析，而且解析了就会创建。如：{}!={} 或（function（）{}）!=（function（）{}）。
</code></pre><blockquote>
<p>1、什么是原型 prototype</p>
</blockquote>
<pre><code>可以简单理解为原型是函数背后的对象，其存在的意义是函数进行深拷贝时可以不拷贝这个对象，从而提高性能。这个对象，我们把它称为原型prototype。
在js中解析到就会创建，因此在创建函数时，把方法写在构造函数中，这样做的好处是：无论创建多少个对象，都只有一个方法的副本。
在js中每一个函数背后都有一个对象存在，这个对象使用  函数名.prototype来访问，而且函数不同，其对象也不同，默认情况下这个对象含有一个constructor属性，用于指回该函数。也就是说，在默认情况下如果一个对象含有constructor属性，同时这个属性指向某个函数，那么这个对象就是这个函数背后的prototype。
</code></pre><blockquote>
<p>2、什么是  <strong> proto</strong> </p>
</blockquote>
<pre><code>__proto__属性，是用来 ：利用实例对象观察其原型的结构。
如果不使用__proto__，那么想要观察对象的继承关系就只能通过实例.constructor.prototype来获得实例对象的  原型对象这种方法书写起来麻烦。
因此，最早在火狐中给实例对象引入了__proto__属性，用来快速访问该实例的 原型对象。
注意：该属性是内部属性，作为调试工具，不建议在代码中使用。
</code></pre><blockquote>
<p>3、prototype 和 <strong> proto</strong> 有什么关系？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">prototype  是构造函数访问原型属性的方法，</div><div class="line"> 例如：</div><div class="line"> <span class="built_in">Object</span>.prototype   </div><div class="line"> __proto__  是实例对象访问原型对象的方法。</div><div class="line"> Var obj = &#123;&#125;;</div><div class="line"> obj.__proto__  等价于  obj.constructor.prototype</div><div class="line"> 它们是两个不同的“对象”访问同一个原型的两种不同的方法。</div></pre></td></tr></table></figure>
<blockquote>
<p>4、关于原型对象和原型属性</p>
</blockquote>
<p>原型在构造函数的角度来看，是利用prototype属性获得到的，所以称其为 构造函数的 原型属性，简称为原型。<br>如果从实例的角度来看，原型是实例对象的 原型对象，也简称为原型。<br>因此原型对象和原型属性可以简单理解成：构造函数和实例访问的是用一个原型，对象不同，所以起了个不同的名字。<br>凡是构造函数就有原型属性，凡是实例对象就有原型对象。</p>
<p>原型对象的成员可以直接被实例对象访问。称其为原型式继承。</p>
<blockquote>
<p> 5、原型链</p>
</blockquote>
<p>原型也是对象，所以原型也有原型，原型的原型也有原型，直到…null。<br>下面是在大神那里看到的一副关于构造函数、原型和实例之间关系的三角图↓↓↓</p>
<p> <img src="images/ConstructorPrototype.jpg" alt="构造函数原型实例三角图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git.md</title>
    <link href="http://yoursite.com/2016/07/22/git-md/"/>
    <id>http://yoursite.com/2016/07/22/git-md/</id>
    <published>2016-07-22T03:41:23.000Z</published>
    <updated>2018-01-19T02:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="命令行概述"><a href="#命令行概述" class="headerlink" title="命令行概述"></a>命令行概述</h2><ul>
<li>dos （windows）</li>
<li>shell （Linux）：bash csh ksh</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li>pwd (Print Working Directory) 查看当前目录</li>
<li>cd (Change Directory) 切换目录，如 cd /etc</li>
<li>ls (List) 查看当前目录下内容，如 ls -al</li>
<li>mkdir (Make Directory) 创建目录，如 mkdir blog</li>
<li>touch 创建文件，如 touch index.html</li>
<li>cat 查看文件全部内容，如 cat index.html</li>
<li>less 查看文件，如more /etc/passwd、less /etc/passwd</li>
<li>rm (remove) 删除文件，如 rm index.html、rm -rf  blog</li>
<li>rmdir (Remove Directory) 删除文件夹，只能删除空文件夹，不常用</li>
<li>mv (move) 移动文件或重命名，如 mv index.html ./demo/index.html</li>
<li>cp (copy) 复制文件，cp index.html ./demo/index.html</li>
<li>tab 自动补全，连按两次会将所有匹配内容显示出来</li>
<li>> 和 &gt;&gt;重定向，如echo hello world! &gt; README.md，&gt;覆盖 &gt;&gt;追加</li>
<li>| 管道符可以将多个命令连接使用，上一次（命令）的执行结果当成下一次（命令）的参数。</li>
<li>grep 匹配内容，一般结合管道符使用<a id="more"></a>
<h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><blockquote>
<p>linux操作系统标配，相当于windows下的记事本。</p>
</blockquote>
</li>
</ul>
<h3 id="vi编辑器的三种模式"><a href="#vi编辑器的三种模式" class="headerlink" title="vi编辑器的三种模式"></a>vi编辑器的三种模式</h3><blockquote>
<p>vi编辑器提供了3种模式，分别是命令模式、插入模式、底行模式，每种模式下用户所能进行的操作是不一样的。</p>
</blockquote>
<ul>
<li>3种模式的切换如下图所示：</li>
</ul>
<p><img src="img/git1.jpg" alt=""></p>
<h3 id="vi常用操作"><a href="#vi常用操作" class="headerlink" title="vi常用操作"></a>vi常用操作</h3><ul>
<li>a) 打开/创建文件， vi 文件路径</li>
<li>b) 底行模式 :w保存，:w filenme另存为</li>
<li>c) 底行模式 :q退出</li>
<li>d) 底行模式 :wq保存并退出</li>
<li>e) 底行模式 :e! 撤销更改，返回到上一次保存的状态</li>
<li>f) 底行模式 :q! 不保存强制退出</li>
<li>g) 底行模式 :set nu 设置行号</li>
<li>h) 命令模式 ZZ（大写）保存并退出</li>
<li>i) 命令模式 u辙销操作，可多次使用</li>
<li>j) 命令模式 dd删除当前行</li>
<li>k) 命令模式 yy复制当前行</li>
<li>l) 命令模式 p 粘贴内容</li>
<li>m) 命令模式 ctrl+f向前翻页</li>
<li>n) 命令模式 ctrl+b向后翻页</li>
<li>o) 命令模式 i进入编辑模式，当前光标处插入</li>
<li>p) 命令模式 a进入编辑模式，当前光标后插入</li>
<li>q) 命令模式 A进入编辑模式，光标移动到行尾</li>
<li>r) 命令模式 o进入编辑模式，当前行下面插入新行</li>
<li>s) 命令模式 O进入编辑模式，当前行上面插入新行</li>
</ul>
<h2 id="版本控制概述"><a href="#版本控制概述" class="headerlink" title="版本控制概述"></a>版本控制概述</h2><ul>
<li>本地版本控制</li>
<li>集中版本控制</li>
<li>分布式版本控制</li>
</ul>
<h2 id="git环境安装"><a href="#git环境安装" class="headerlink" title="git环境安装"></a>git环境安装</h2><ul>
<li>window安装<ul>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">下载地址</a>，下载后和普通软件安装方式一样</li>
</ul>
</li>
<li>linux安装<ul>
<li>CentOS发行版：sudo yum install git</li>
<li>Ubuntu发行版：sudo apt-get install git</li>
</ul>
</li>
<li>Mac安装<ul>
<li>打开Terminal直接输入git命令，会自动提示，按提示引导安装即可</li>
</ul>
</li>
</ul>
<h2 id="git工作原理"><a href="#git工作原理" class="headerlink" title="git工作原理"></a>git工作原理</h2><h3 id="git的三个工作区域"><a href="#git的三个工作区域" class="headerlink" title="git的三个工作区域"></a>git的三个工作区域</h3><ul>
<li>工作目录</li>
<li>暂存区域</li>
<li>本地仓库</li>
</ul>
<p><img src="img/area.jpg" alt=""></p>
<h3 id="git管理文件的4中状态"><a href="#git管理文件的4中状态" class="headerlink" title="git管理文件的4中状态"></a>git管理文件的4中状态</h3><ul>
<li>未追踪untraced</li>
<li>已暂存staged</li>
<li>已提交commited</li>
<li>已修改modified</li>
</ul>
<h2 id="git工作流程-本地创建仓库"><a href="#git工作流程-本地创建仓库" class="headerlink" title="git工作流程-本地创建仓库"></a>git工作流程-本地创建仓库</h2><ol>
<li>配置用户信息</li>
<li>初始化仓库</li>
<li>添加文件到暂存区</li>
<li>提交文件</li>
<li>查看文件状态</li>
<li>查看提交历史</li>
<li>撤销文件修改</li>
<li>恢复版本</li>
</ol>
<h2 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h2><h3 id="分支概述"><a href="#分支概述" class="headerlink" title="分支概述"></a>分支概述</h3><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ol>
<li>创建分支</li>
<li>切换分支</li>
<li>合并分支</li>
<li>删除分支</li>
</ol>
<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><ul>
<li>配置用户信息<ul>
<li>全局配置，软件安装目录C:\Program Files\Git\mingw64\etc\gitconfig</li>
<li>用户配置，用户名目录C:\Users\www.gitconfig</li>
<li>项目配置，项目目录</li>
<li>git config –global user.name zhangsan</li>
<li>git config –global user.email “zhangsan@163.com”</li>
</ul>
</li>
<li>查看文件状态<ul>
<li>git status</li>
</ul>
</li>
<li>查看提交记录(按q键退出)<ul>
<li>git log</li>
</ul>
</li>
<li>工作区添加到暂存区<ul>
<li>git add</li>
</ul>
</li>
<li>暂存区覆盖工作区内容<ul>
<li>git checkout</li>
</ul>
</li>
<li>暂存区提交到本地仓库<ul>
<li>git commit -m ‘bug fixed’</li>
</ul>
</li>
<li>回滚特定版本<ul>
<li>git reset –hard <commit></commit></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h1&gt;&lt;h2 id=&quot;命令行概述&quot;&gt;&lt;a href=&quot;#命令行概述&quot; class=&quot;headerlink&quot; title=&quot;命令行概述&quot;&gt;&lt;/a&gt;命令行概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;dos （windows）&lt;/li&gt;
&lt;li&gt;shell （Linux）：bash csh ksh&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;pwd (Print Working Directory) 查看当前目录&lt;/li&gt;
&lt;li&gt;cd (Change Directory) 切换目录，如 cd /etc&lt;/li&gt;
&lt;li&gt;ls (List) 查看当前目录下内容，如 ls -al&lt;/li&gt;
&lt;li&gt;mkdir (Make Directory) 创建目录，如 mkdir blog&lt;/li&gt;
&lt;li&gt;touch 创建文件，如 touch index.html&lt;/li&gt;
&lt;li&gt;cat 查看文件全部内容，如 cat index.html&lt;/li&gt;
&lt;li&gt;less 查看文件，如more /etc/passwd、less /etc/passwd&lt;/li&gt;
&lt;li&gt;rm (remove) 删除文件，如 rm index.html、rm -rf  blog&lt;/li&gt;
&lt;li&gt;rmdir (Remove Directory) 删除文件夹，只能删除空文件夹，不常用&lt;/li&gt;
&lt;li&gt;mv (move) 移动文件或重命名，如 mv index.html ./demo/index.html&lt;/li&gt;
&lt;li&gt;cp (copy) 复制文件，cp index.html ./demo/index.html&lt;/li&gt;
&lt;li&gt;tab 自动补全，连按两次会将所有匹配内容显示出来&lt;/li&gt;
&lt;li&gt;&gt; 和 &amp;gt;&amp;gt;重定向，如echo hello world! &amp;gt; README.md，&amp;gt;覆盖 &amp;gt;&amp;gt;追加&lt;/li&gt;
&lt;li&gt;| 管道符可以将多个命令连接使用，上一次（命令）的执行结果当成下一次（命令）的参数。&lt;/li&gt;
&lt;li&gt;grep 匹配内容，一般结合管道符使用
    
    </summary>
    
    
  </entry>
  
</feed>
